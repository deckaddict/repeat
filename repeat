#!/data/data/com.termux/files/usr/bin/python

import argparse
import datetime
import glob
import os
import pickle
import sys
import uuid
import yaml

def collect_tasks():
    """
    Return tasks to be performed today.
    """

    tasks = []

    # Read all yaml files in a given directory
    # List all files, extract tasks per file.
    files = glob.glob("/sdcard/repeat/*.yml")
    for file in files:
        tasks.extend(filter_tasks_from_yml(file))

    return tasks

def filter_tasks_from_yml(file):
    """
    Return tasks to be performed today from given file.
    """

    # Setting up usable expressions for trigger
    date = datetime.date.today()
    y = date.year
    m = date.month
    w = date.isocalendar()[1]
    doy = date.timetuple().tm_yday
    dom = date.day
    dow = date.weekday()

    with open(file, 'r') as stream:
        try:
            yml_tasks =  yaml.safe_load(stream)
        except yaml.YAMLError as exception:
            print(exception)

    tasks = []

    for title, task in yml_tasks.items():
        task['title'] = title
        if eval(task['when'].replace('.','').replace('\\','')):
            tasks.append(task)

    return tasks


def create_notifications(tasks):
    """
    Create notifications for all tasks.
    """

    for task in tasks:
        create_notification(task)

    return

def create_notification(task):
    """
    Create notification for a task.
    """

    id = str(uuid.uuid1())
    cmd = []
    cmd.append('termux-notification')
    cmd.append('--id ' + id)
    cmd.append('--content "' + task['title'] + '"')
    cmd.append('--priority low')
    cmd.append('--button1 Done')
    cmd.append('--button1-action "termux-notification-remove ' + id + '"')
    if 'details_uri' in task and task['details_uri']:
        cmd.append('--button2 Details')
        cmd.append('--button2-action "termux-share ' + task['details_uri'] + '"')
    print("Command: ", cmd)
    os.system(' '.join(cmd))

    return

def check_advance_state():
    """
    Checks the current state of scheduling
    Return values:
    run      True if repeat shall run
    schedule True if repeat shall be scheduled

    """

    states = ["PREMIER",
              "RUN_ONCE",
              "REGULAR"]

    state_impact = {"PREMIER"  : (True, False),
                    "RUN_ONCE" : (False, True),
                    "REGULAR"  : (True, False)}

    state = new_state = states[0]

    STATE_FILE = "/sdcard/repeat/runstate.pickle"
    # Check if state file exists
    if os.path.isfile(STATE_FILE):
        # Load data from pickle file
        state = new_state = pickle.load(open(STATE_FILE, 'rb'))

        current_state_ix = states.index(state)
        if current_state_ix < len(states)-1:
            new_state = states[current_state_ix+1]

    pickle.dump(new_state, open(STATE_FILE, 'wb'))

    print("State:",state)
    return state_impact[state]

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Filter tasks and raise notifications')
    parser.add_argument('--terminate', default=False, action='store_true',
                        help='Stop re-scheduling')

    args = parser.parse_args()

    run, schedule = check_advance_state()

    # refresh code+tasks
    # filter tasks
    # Create notifications
    if run:
        tasks = collect_tasks()
        create_notifications(tasks)

    if schedule:
        os.system('termux-job-scheduler --job-id 239347 --period-ms 86400000 --script ' + sys.argv[0])

    # Can set a stop state and then call itself instead...
    if args.terminate:
        os.system('termux-job-scheduler --job-id 239347 --script /data/data/com.termux/files/home/repeat/terminate')
